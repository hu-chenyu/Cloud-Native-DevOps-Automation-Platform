pipeline {
    agent any
    triggers {
        GenericTrigger(
            genericVariables: [
                [key: 'alertname', value: '$.alerts[0].labels.alertname']
            ],
            causeString: '触发自愈: ${alertname}',
            tokenCredentialId: 'auto-recovery-token-plain',
            printContributedVariables: true
        )
    }
    environment {
        REGISTRY = "crpi-uza247h4wtxt6urw.cn-shenzhen.personal.cr.aliyuncs.com"
        NAMESPACE = "devops-platform-plus"
        REPO_NAME = "ansible-role"
        IMAGE_NAME = "crpi-uza247h4wtxt6urw.cn-shenzhen.personal.cr.aliyuncs.com/devops-platform-plus/ansible-role:enhanced"
        CONTAINER_NAME = "myapp-chaos"
        PORT_MAPPING = "5000:5000 5001:5001"
        PROMETHEUS_URL = "http://120.76.42.201:9090"
        ALERTMANAGER_URL = "http://120.76.42.201:9093"
    }
    parameters {
        booleanParam(
            name: 'AUTO_MODE',
            defaultValue: params.alertname ? true : false,
            // 根据触发源自动判断模式
            description: '是否自动化触发'
        )
    }
    stages {
        stage('容器恢复') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'aliyun-acr', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASSWORD')]) {
                        sh '''#!/bin/bash -x
                            # 权限预检（关键调试信息）
                            echo "=== 环境验证 ==="
                            ls -l /var/run/docker.sock
                            groups
                            docker ps 2>&1
                            
                            # 智能容器恢复
                            case "$(docker inspect -f '{{.State.Status}}' ${CONTAINER_NAME} 2>/dev/null || echo 'not_found')" in
                                "running")  
                                    echo "✅ 容器已在运行状态"
                                    ;;
                                "exited")   
                                    echo "🔄 检测到停止的容器，正在启动..."
                                    docker start ${CONTAINER_NAME} || {
                                        echo "🛠️ 启动失败，执行深度修复..."
                                        docker rm -f ${CONTAINER_NAME}
                                        docker run -d \\
                                            --name ${CONTAINER_NAME} \\
                                            -v /var/run/docker.sock:/var/run/docker.sock \\
                                            -p ${PORT_MAPPING} \\
                                            --restart=unless-stopped \\
                                            ${IMAGE_NAME}
                                    }
                                    ;;
                                "not_found")
                                    echo "🏗️ 容器不存在，正在创建..."
                                    echo "$DOCKER_PASSWORD" | docker login \\
                                        --username "$ESCAPED_USER" \\
                                        --password-stdin "${REGISTRY}"
                                    docker run -d \\
                                        --name ${CONTAINER_NAME} \\
                                        -v /var/run/docker.sock:/var/run/docker.sock \\
                                        -p ${PORT_MAPPING} \\
                                        --restart=unless-stopped \\
                                        ${IMAGE_NAME}
                                    ;;
                                *)          
                                    echo "🚨 异常状态: $container_status"
                                    exit 1
                                    ;;
                            esac
                            
                            # 动态健康检查
                            echo "🔍 开始健康检查..."
                            CONTAINER_IP=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' ${CONTAINER_NAME})
                            for i in {1..10}; do
                                if curl -sSf --connect-timeout 3 http://${CONTAINER_IP}:5000/health; then
                                    echo "✅ 健康检查通过"
                                    break
                                else
                                    timeout=$(( (1 << i) * 2 ))  # 2,4,8...秒
                                    echo "⏳ 第${i}次检查失败（等待${timeout}秒）..."
                                    sleep ${timeout}
                                fi
                                [ $i -eq 10 ] && { echo "❌ 健康检查超时"; exit 1; }
                            done
                        '''
                    }
                }
            }
        }
        
        stage('告警状态同步') {
            when { expression { params.AUTO_MODE } }
            steps {
                script {
                    sh '''
                        #!/bin/bash
                        # 删除历史告警痕迹
                        curl -X POST -g "${PROMETHEUS_URL}/api/v1/admin/tsdb/delete_series" \\
                            -d 'match[]={alertname=~"ChaosContainerDown|AppHealthCheckFailed"}'

                        # 创建精准静默规则（有效期4小时）
                        startsAt=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
                        endsAt=$(date -u -d "+4 hours" +"%Y-%m-%dT%H:%M:%SZ")
                        
                        curl -X POST "${ALERTMANAGER_URL}/api/v2/silences" \\
                            -H "Content-Type: application/json" \\
                            -d "{
                                \\"matchers\\": [
                                    {\\"name\\":\\"alertname\\",\\"value\\":\\"AppHealthCheckFailed\\",\\"isRegex\\":false},
                                    {\\"name\\":\\"instance\\",\\"value\\":\\"http://myapp-chaos:5000/health\\",\\"isRegex\\":false}
                                ],
                                \\"startsAt\\":\\"${startsAt}\\",
                                \\"endsAt\\":\\"${endsAt}\\",
                                \\"createdBy\\":\\"auto-recovery-system\\",
                                \\"comment\\":\\"[自动化] 故障修复静默规则\\"
                            }"

                        # 强制数据刷新
                        curl -X POST "${PROMETHEUS_URL}/-/reload"
                        echo "⏳ 等待Prometheus指标刷新"
                        sleep 60
                    '''
                }
            }
        }
        
        stage('验证闭环') {
            steps {
                script {
                    sh '''
                        #!/bin/bash
                        # 双重验证机制
                        echo "🔍 阶段1：验证容器状态"
                        container_status=$(docker inspect -f '{{.State.Status}}' ${CONTAINER_NAME} 2>/dev/null || echo 'not_found')
                        [ "$container_status" != "running" ] && {
                            echo "❌ 容器状态异常: $container_status"
                            exit 1
                        }

                        echo "🔍 阶段2：验证告警状态"
                        for i in {1..12}; do  # 最长等待12分钟
                            alerts=$(curl -s "${PROMETHEUS_URL}/api/v1/alerts" | \\
                                jq -r '.data.alerts[] | select(.labels.alertname=="AppHealthCheckFailed" and .state=="firing")')
                            
                            if [ -n "$alerts" ]; then
                                echo "⏳ 告警仍存在（等待60秒）..."
                                sleep 60
                            else
                                echo "✅ 所有告警已清除"
                                exit 0
                            fi
                        done
                        echo "❌ 告警清除超时"
                        exit 1
                    '''
                }
            }
        }
    }
    post {
        always {
            script {
                echo "===== 📊 最终状态报告 ====="
                sh '''
                    echo "🕒 时间戳: $(date)"
                    echo "🐳 容器状态: $(docker inspect -f '{{.State.Status}}' ${CONTAINER_NAME} 2>/dev/null || echo 'not_found')"
                    echo "📡 Prometheus目标状态:"
                    curl -s "${PROMETHEUS_URL}/api/v1/targets" | jq '.data.activeTargets[] | "\\(.labels.job): \\(.health)"'
                '''
            }
        }
        failure {
            script {
                echo "===== 🔥 故障诊断 ====="
                sh '''
                    echo "🔍 容器日志最后50行:"
                    docker logs ${CONTAINER_NAME} --tail 50 2>&1 || true
                    
                    echo "📊 Prometheus告警列表:"
                    curl -s "${PROMETHEUS_URL}/api/v1/alerts" | jq '.data.alerts[] | "\\(.labels.alertname): \\(.state)"'
                '''
            }
        }
    }
}
